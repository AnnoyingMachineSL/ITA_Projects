# int - целое число
# float - дробное число
# str - строка (", ', """)
# bool - True, False
# list - список []
# dict - словарь {'a': 1, 'b': 2}

# print() - вывести переменную

# / - деление, возвращает float
# // - деление без остатка, возвращает int
# % - остаток от деления, возвращает int
# ** - возведение в степень
# * - умножение, можно умножать строки
# + - сложение, можно складывать строки

# [start:end:step] - [0:-1:1]

# == - сравнение
# <= - меньше или равно
# >= - больше или равно
# != - не равно

# append - положить в конец списка
# insert - положить на определённый индекс
# pop - удалить элемент из списка/словаря
# index - найти индекс элемента
# count - количество элементов в списке
# remove - удалить определённое значение из списка
# len - длина списка/строки

# keys - вывести ключи словаря
# values - вывести значения словаря


# Небольшие упражнения:

# Какой тип данных будет у следающих выражений, и что они выведут:
# 3 + 2.5
# 4/2
# 4//2
# 4%2
# str(3)+'2'
# 0.5+0.5
# ‘4’*6
# 4 == 4
# '4' == 4
# [4]



# ДЗ:

# Вы – пастух со стадом-списком овец. В стаде завёлся волк, и вам нужно предупредить соседних с ним овец,
# что рядом с ними находится волк. Выведите номера овец в опасности, но помните, что они не программисты,
# и начинают считать не с нуля.
# [‘овца’, ‘волк’, ‘овца’, ‘овца’, ‘овца’] = ‘1 и 3’
# [‘овца’, ‘овца’, ‘овца’, ‘овца’, ‘овца’, ‘волк’, ‘овца’, ‘овца’] = ‘5 и 7’


# Пользователь может ввести любую карту. Вам надо вывести пользователю масть этой карты в словах.
# 6♠ = пики
# К♣ = крести
# 10♦ = бубны
# В♥ = червы


# first = ['овца', 'волк', 'овца', 'овца', 'овца']
# second = ['овца', 'овца', 'овца', 'овца', 'овца', 'волк', 'овца', 'овца']
# asd = ['овца', 'овца', 'овца', 'овца']
#
#
# def finding_wolf(lst):
#     print(f'{lst.index('волк')} и {lst.index('волк') + 2}') if 'волк' in lst and lst.index('волк') >=1 and lst.index('волк') <= len(lst) -2 else print('Incorrect data')
#
# finding_wolf(first)
# finding_wolf(second)
# finding_wolf(asd)
#
# def cards(string):
#
#     types = {
#
#         '♠': 'пики',
#         '♣': 'крести',
#         '♦': 'бубны',
#         '♥': 'червы'
#     }
#
#     for key in types.keys():
#         if key in string:
#             print(types[key])
#             break
#
#
# cards('6♠')
# cards('К♣')
# cards('10♦')
# cards('В♥')


first = ['овца', 'овца', 'овца', 'овца']
second = ['овца', 'овца', 'овца', 'овца', 'овца', 'волк', 'овца', 'овца']
asd = ['овца', 'овца', 'овца', 'овца']


# def wolfs(lst):
#
#     if 'волк'in lst and lst.index('волк') == 0:
#         print(lst.index('волк') + 2)
#     elif 'волк'in lst and lst.index('волк') == len(lst) - 1:
#         print(lst.index('волк'))
#     elif 'волк'in lst:
#         print(f'{lst.index('волк')} и {lst.index('волк') + 2}')
#     else:
#         print('Все овцы в безопастности!')
#
# wolfs(first)


# def geometric(lst):
#     ans = (lst[0] * lst[1]) ** 0.5
#     return ans if isinstance(ans, float) else 'Невозможно вычислить среднее геометрическое'
#
#
# print(geometric([-19,-6]))

lst = [1,2,3,4,5,6,7,8]

# def mat_oper(lst):
#     iter = 0
#     while len(lst) > 1:
#         lst = [lst[i] + lst[i-1] for i in range(1, len(lst), 2)] if iter % 2 == 0 else [lst[i] * lst[i-1] for i in range(1, len(lst), 2)]
#         iter += 1
#         print(lst)
#     return lst
#
#
# mat_oper(lst)

